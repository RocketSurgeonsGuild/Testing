Autofac.Extras.Moq.AutoMock
Autofac.Extras.Moq.AutoMock.Container.get -> Autofac.IContainer
Autofac.Extras.Moq.AutoMock.Create<T>(params Autofac.Core.Parameter[] parameters) -> T
Autofac.Extras.Moq.AutoMock.Dispose() -> void
Autofac.Extras.Moq.AutoMock.Mock<T>(params Autofac.Core.Parameter[] parameters) -> Moq.Mock<T>
Autofac.Extras.Moq.AutoMock.MockRepository.get -> Moq.MockRepository
Autofac.Extras.Moq.AutoMock.Provide<TService, TImplementation>(params Autofac.Core.Parameter[] parameters) -> TService
Autofac.Extras.Moq.AutoMock.Provide<TService>(TService instance) -> TService
Autofac.Extras.Moq.AutoMock.VerifyAll.get -> bool
Autofac.Extras.Moq.AutoMock.VerifyAll.set -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest
Rocket.Surgery.Extensions.Testing.AutoMockTest.AutoMock.get -> Autofac.Extras.Moq.AutoMock
Rocket.Surgery.Extensions.Testing.AutoMockTest.AutoMockTest(Xunit.Abstractions.ITestOutputHelper outputHelper, Microsoft.Extensions.Logging.LogLevel minLevel, Moq.MockBehavior mockBehavior = Moq.MockBehavior.Default, string logFormat = "[{Timestamp:HH:mm:ss} {Level:w4}] {Message}{NewLine}{Exception}", System.Action<Serilog.LoggerConfiguration> configureLogger = null) -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest.AutoMockTest(Xunit.Abstractions.ITestOutputHelper outputHelper, Moq.MockBehavior mockBehavior = Moq.MockBehavior.Default, string logFormat = "[{Timestamp:HH:mm:ss} {Level:w4}] {Message}{NewLine}{Exception}", System.Action<Serilog.LoggerConfiguration> configureLogger = null) -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest.AutoMockTest(Xunit.Abstractions.ITestOutputHelper outputHelper, Serilog.Events.LogEventLevel minLevel, Moq.MockBehavior mockBehavior = Moq.MockBehavior.Default, string logFormat = "[{Timestamp:HH:mm:ss} {Level:w4}] {Message}{NewLine}{Exception}", System.Action<Serilog.LoggerConfiguration> configureLogger = null) -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration
Rocket.Surgery.Extensions.Testing.AutoMockTest.Container.get -> Autofac.IContainer
Rocket.Surgery.Extensions.Testing.AutoMockTest.Moq.get -> Autofac.Extras.Moq.AutoMock
Rocket.Surgery.Extensions.Testing.AutoMockTest.Populate((Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) context) -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest.Populate(Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) -> void
Rocket.Surgery.Extensions.Testing.AutoMockTest.ServiceProvider.get -> Autofac.Extensions.DependencyInjection.AutofacServiceProvider
static Autofac.Extras.Moq.AutoMock.GetFromRepository(Moq.MockRepository repository) -> Autofac.Extras.Moq.AutoMock
static Autofac.Extras.Moq.AutoMock.GetFromRepository(Moq.MockRepository repository, System.Action<Autofac.ContainerBuilder> beforeBuild) -> Autofac.Extras.Moq.AutoMock
static Autofac.Extras.Moq.AutoMock.GetLoose() -> Autofac.Extras.Moq.AutoMock
static Autofac.Extras.Moq.AutoMock.GetLoose(System.Action<Autofac.ContainerBuilder> beforeBuild) -> Autofac.Extras.Moq.AutoMock
static Autofac.Extras.Moq.AutoMock.GetStrict() -> Autofac.Extras.Moq.AutoMock
static Autofac.Extras.Moq.AutoMock.GetStrict(System.Action<Autofac.ContainerBuilder> beforeBuild) -> Autofac.Extras.Moq.AutoMock
virtual Rocket.Surgery.Extensions.Testing.AutoMockTest.BuildContainer(Autofac.ContainerBuilder cb) -> void