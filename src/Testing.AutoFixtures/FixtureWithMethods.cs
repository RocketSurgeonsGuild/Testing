using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Rocket.Surgery.Extensions.Testing.AutoFixtures;

internal static class FixtureWithMethods
{
    public static MemberDeclarationSyntax[] BuildFixtureMethods(INamedTypeSymbol namedTypeSymbol)
    {
        return
        [
            FieldMethod(namedTypeSymbol),
        ];
    }

    public static MemberDeclarationSyntax FieldMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword)
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier(FieldGenericParameter)
                            )
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        IdentifierName(FieldGenericParameter)
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("value")
                                    )
                                   .WithType(
                                        IdentifierName(FieldGenericParameter)
                                    ),
                            }
                        )
                    )
                )
               .WithBody(
                    Block(
                        ExpressionStatement(
                            AssignmentExpression(
                                SyntaxKind.SimpleAssignmentExpression,
                                IdentifierName(
                                    Identifier(
                                        TriviaList(),
                                        SyntaxKind.FieldKeyword,
                                        "field",
                                        "field",
                                        TriviaList()
                                    )
                                ),
                                IdentifierName("value")
                            )
                        ),
                        ReturnStatement(
                            ThisExpression()
                        )
                    )
                )
        );
    }

    public static MemberDeclarationSyntax CollectionEnumerableMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword)
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier(FieldGenericParameter)
                            )
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("Collection")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName(FieldGenericParameter)
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("values")
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("IEnumerable")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName(FieldGenericParameter)
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                            }
                        )
                    )
                )
               .WithBody(
                    Block(
                        IfStatement(
                                BinaryExpression(
                                    SyntaxKind.EqualsExpression,
                                    IdentifierName("values"),
                                    LiteralExpression(
                                        SyntaxKind.NullLiteralExpression
                                    )
                                ),
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ExpressionStatement(
                                            AssignmentExpression(
                                                SyntaxKind.SimpleAssignmentExpression,
                                                IdentifierName(
                                                    Identifier(
                                                        TriviaList(),
                                                        SyntaxKind.FieldKeyword,
                                                        "field",
                                                        "field",
                                                        TriviaList()
                                                    )
                                                ),
                                                LiteralExpression(
                                                    SyntaxKind.NullLiteralExpression
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                           .WithElse(
                                ElseClause(
                                    IfStatement(
                                        BinaryExpression(
                                            SyntaxKind.NotEqualsExpression,
                                            IdentifierName(
                                                Identifier(
                                                    TriviaList(),
                                                    SyntaxKind.FieldKeyword,
                                                    "field",
                                                    "field",
                                                    TriviaList()
                                                )
                                            ),
                                            LiteralExpression(
                                                SyntaxKind.NullLiteralExpression
                                            )
                                        ),
                                        Block(
                                            SingletonList<StatementSyntax>(
                                                ForEachStatement(
                                                    IdentifierName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.VarKeyword,
                                                            "var",
                                                            "var",
                                                            TriviaList()
                                                        )
                                                    ),
                                                    Identifier("item"),
                                                    IdentifierName("values"),
                                                    ExpressionStatement(
                                                        InvocationExpression(
                                                                MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName(
                                                                        Identifier(
                                                                            TriviaList(),
                                                                            SyntaxKind.FieldKeyword,
                                                                            "field",
                                                                            "field",
                                                                            TriviaList()
                                                                        )
                                                                    ),
                                                                    IdentifierName("Add")
                                                                )
                                                            )
                                                           .WithArgumentList(
                                                                ArgumentList(
                                                                    SingletonSeparatedList(
                                                                        Argument(
                                                                            IdentifierName("item")
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            ),
                        ReturnStatement(
                            ThisExpression()
                        )
                    )
                )
        );
    }

    public static MemberDeclarationSyntax CollectionFieldMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        new[]
                        {
                            Token(SyntaxKind.PublicKeyword),
                        }
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier("TField")
                            )
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("Collection")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("TField")
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("value")
                                    )
                                   .WithType(
                                        IdentifierName("TField")
                                    ),
                            }
                        )
                    )
                )
               .WithBody(
                    Block(
                        ExpressionStatement(
                            ConditionalAccessExpression(
                                IdentifierName(
                                    Identifier(
                                        TriviaList(),
                                        SyntaxKind.FieldKeyword,
                                        "field",
                                        "field",
                                        TriviaList()
                                    )
                                ),
                                InvocationExpression(
                                        MemberBindingExpression(
                                            IdentifierName("Add")
                                        )
                                    )
                                   .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList(
                                                Argument(
                                                    IdentifierName("value")
                                                )
                                            )
                                        )
                                    )
                            )
                        ),
                        ReturnStatement(
                            ThisExpression()
                        )
                    )
                )
        );
    }

    public static MemberDeclarationSyntax ListEnumerableMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    PragmaWarningDirectiveTrivia(
                                            Token(SyntaxKind.DisableKeyword),
                                            true
                                        )
                                       .WithErrorCodes(
                                            SingletonSeparatedList<ExpressionSyntax>(
                                                IdentifierName("CA1002")
                                            )
                                        )
                                )
                            ),
                            SyntaxKind.PublicKeyword,
                            TriviaList()
                        )
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier("TField")
                            )
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("List")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("TField")
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("values")
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("IEnumerable")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("TField")
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                            }
                        )
                    )
                )
               .WithBody(
                    Block(
                            IfStatement(
                                    BinaryExpression(
                                        SyntaxKind.EqualsExpression,
                                        IdentifierName("values"),
                                        LiteralExpression(
                                            SyntaxKind.NullLiteralExpression
                                        )
                                    ),
                                    Block(
                                        SingletonList<StatementSyntax>(
                                            ExpressionStatement(
                                                AssignmentExpression(
                                                    SyntaxKind.SimpleAssignmentExpression,
                                                    IdentifierName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.FieldKeyword,
                                                            "field",
                                                            "field",
                                                            TriviaList()
                                                        )
                                                    ),
                                                    LiteralExpression(
                                                        SyntaxKind.NullLiteralExpression
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                               .WithElse(
                                    ElseClause(
                                        IfStatement(
                                            IsPatternExpression(
                                                IdentifierName(
                                                    Identifier(
                                                        TriviaList(),
                                                        SyntaxKind.FieldKeyword,
                                                        "field",
                                                        "field",
                                                        TriviaList()
                                                    )
                                                ),
                                                UnaryPattern(
                                                    ConstantPattern(
                                                        LiteralExpression(
                                                            SyntaxKind.NullLiteralExpression
                                                        )
                                                    )
                                                )
                                            ),
                                            Block(
                                                SingletonList<StatementSyntax>(
                                                    ExpressionStatement(
                                                        InvocationExpression(
                                                                MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName(
                                                                        Identifier(
                                                                            TriviaList(),
                                                                            SyntaxKind.FieldKeyword,
                                                                            "field",
                                                                            "field",
                                                                            TriviaList()
                                                                        )
                                                                    ),
                                                                    IdentifierName("AddRange")
                                                                )
                                                            )
                                                           .WithArgumentList(
                                                                ArgumentList(
                                                                    SingletonSeparatedList(
                                                                        Argument(
                                                                            IdentifierName("values")
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                ),
                            ReturnStatement(
                                ThisExpression()
                            )
                        )
                       .WithOpenBraceToken(
                            Token(
                                TriviaList(
                                    Trivia(
                                        PragmaWarningDirectiveTrivia(
                                                Token(SyntaxKind.RestoreKeyword),
                                                true
                                            )
                                           .WithErrorCodes(
                                                SingletonSeparatedList<ExpressionSyntax>(
                                                    IdentifierName("CA1002")
                                                )
                                            )
                                    )
                                ),
                                SyntaxKind.OpenBraceToken,
                                TriviaList()
                            )
                        )
                )
        );
    }

    public static MemberDeclarationSyntax ListFieldMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    PragmaWarningDirectiveTrivia(
                                            Token(SyntaxKind.DisableKeyword),
                                            true
                                        )
                                       .WithErrorCodes(
                                            SingletonSeparatedList<ExpressionSyntax>(
                                                IdentifierName("CA1002")
                                            )
                                        )
                                )
                            ),
                            SyntaxKind.PublicKeyword,
                            TriviaList()
                        )
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier("TField")
                            )
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        NullableType(
                                            GenericName(
                                                    Identifier("List")
                                                )
                                               .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("TField")
                                                        )
                                                    )
                                                )
                                        )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("value")
                                    )
                                   .WithType(
                                        IdentifierName("TField")
                                    ),
                            }
                        )
                    )
                )
               .WithBody(
                    Block(
                            ExpressionStatement(
                                ConditionalAccessExpression(
                                    IdentifierName(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.FieldKeyword,
                                            "field",
                                            "field",
                                            TriviaList()
                                        )
                                    ),
                                    InvocationExpression(
                                            MemberBindingExpression(
                                                IdentifierName("Add")
                                            )
                                        )
                                       .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        IdentifierName("value")
                                                    )
                                                )
                                            )
                                        )
                                )
                            ),
                            ReturnStatement(
                                ThisExpression()
                            )
                        )
                       .WithOpenBraceToken(
                            Token(
                                TriviaList(
                                    Trivia(
                                        PragmaWarningDirectiveTrivia(
                                                Token(SyntaxKind.RestoreKeyword),
                                                true
                                            )
                                           .WithErrorCodes(
                                                SingletonSeparatedList<ExpressionSyntax>(
                                                    IdentifierName("CA1002")
                                                )
                                            )
                                    )
                                ),
                                SyntaxKind.OpenBraceToken,
                                TriviaList()
                            )
                        )
                )
        );
    }

    public static MemberDeclarationSyntax DictionaryDictionaryMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatement(
                    IdentifierName("AuthenticatorFixture"),
                    Identifier("With")
                )
               .WithModifiers(
                    TokenList(
                        new[]
                        {
                            Token(SyntaxKind.PublicKeyword),
                        }
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SeparatedList<TypeParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                TypeParameter(
                                    Identifier("TKey")
                                ),
                                Token(SyntaxKind.CommaToken),
                                TypeParameter(
                                    Identifier("TField")
                                ),
                            }
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier("dictionary")
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        GenericName(
                                                Identifier("Dictionary")
                                            )
                                           .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            IdentifierName("TKey"),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName("TField"),
                                                        }
                                                    )
                                                )
                                            )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("keyValuePair")
                                    )
                                   .WithType(
                                        GenericName(
                                                Identifier("KeyValuePair")
                                            )
                                           .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            IdentifierName("TKey"),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName("TField"),
                                                        }
                                                    )
                                                )
                                            )
                                    ),
                            }
                        )
                    )
                )
               .WithConstraintClauses(
                    SingletonList(
                        TypeParameterConstraintClause(
                                IdentifierName("TKey")
                            )
                           .WithConstraints(
                                SingletonSeparatedList<TypeParameterConstraintSyntax>(
                                    TypeConstraint(
                                        IdentifierName("notnull")
                                    )
                                )
                            )
                    )
                )
               .WithBody(
                    Block(
                        IfStatement(
                            BinaryExpression(
                                SyntaxKind.EqualsExpression,
                                IdentifierName("dictionary"),
                                LiteralExpression(
                                    SyntaxKind.NullLiteralExpression
                                )
                            ),
                            Block(
                                SingletonList<StatementSyntax>(
                                    ThrowStatement(
                                        ObjectCreationExpression(
                                                IdentifierName("ArgumentNullException")
                                            )
                                           .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            InvocationExpression(
                                                                    IdentifierName(
                                                                        Identifier(
                                                                            TriviaList(),
                                                                            SyntaxKind.NameOfKeyword,
                                                                            "nameof",
                                                                            "nameof",
                                                                            TriviaList()
                                                                        )
                                                                    )
                                                                )
                                                               .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                IdentifierName("dictionary")
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                        )
                                                    )
                                                )
                                            )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("dictionary"),
                                        IdentifierName("Add")
                                    )
                                )
                               .WithArgumentList(
                                    ArgumentList(
                                        SeparatedList<ArgumentSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                Argument(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("keyValuePair"),
                                                        IdentifierName("Key")
                                                    )
                                                ),
                                                Token(SyntaxKind.CommaToken),
                                                Argument(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("keyValuePair"),
                                                        IdentifierName("Value")
                                                    )
                                                ),
                                            }
                                        )
                                    )
                                )
                        ),
                        ReturnStatement(
                            ThisExpression()
                        )
                    )
                )
        );
    }

    public static MemberDeclarationSyntax DictionaryKeyValuePairMethod(INamedTypeSymbol namedTypeSymbol)
    {
        return GlobalStatement(
            LocalFunctionStatementSyntax(namedTypeSymbol)
               .WithModifiers(
                    TokenList(
                        new[]
                        {
                            Token(SyntaxKind.PublicKeyword),
                        }
                    )
                )
               .WithTypeParameterList(
                    TypeParameterList(
                        SeparatedList<TypeParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                TypeParameter(
                                    Identifier("TKey")
                                ),
                                Token(SyntaxKind.CommaToken),
                                TypeParameter(
                                    Identifier("TField")
                                ),
                            }
                        )
                    )
                )
               .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                Parameter(
                                        Identifier("dictionary")
                                    )
                                   .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.RefKeyword)
                                        )
                                    )
                                   .WithType(
                                        GenericName(
                                                Identifier("Dictionary")
                                            )
                                           .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            IdentifierName("TKey"),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName("TField"),
                                                        }
                                                    )
                                                )
                                            )
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("key")
                                    )
                                   .WithType(
                                        IdentifierName("TKey")
                                    ),
                                Token(SyntaxKind.CommaToken),
                                Parameter(
                                        Identifier("value")
                                    )
                                   .WithType(
                                        IdentifierName("TField")
                                    ),
                            }
                        )
                    )
                )
               .WithConstraintClauses(
                    SingletonList(
                        TypeParameterConstraintClause(
                                IdentifierName("TKey")
                            )
                           .WithConstraints(
                                SingletonSeparatedList<TypeParameterConstraintSyntax>(
                                    TypeConstraint(
                                        IdentifierName("notnull")
                                    )
                                )
                            )
                    )
                )
               .WithBody(
                    Block(
                        IfStatement(
                            BinaryExpression(
                                SyntaxKind.EqualsExpression,
                                IdentifierName("dictionary"),
                                LiteralExpression(
                                    SyntaxKind.NullLiteralExpression
                                )
                            ),
                            Block(
                                SingletonList<StatementSyntax>(
                                    ThrowStatement(
                                        ObjectCreationExpression(
                                                IdentifierName("ArgumentNullException")
                                            )
                                           .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList(
                                                        Argument(
                                                            InvocationExpression(
                                                                    IdentifierName(
                                                                        Identifier(
                                                                            TriviaList(),
                                                                            SyntaxKind.NameOfKeyword,
                                                                            "nameof",
                                                                            "nameof",
                                                                            TriviaList()
                                                                        )
                                                                    )
                                                                )
                                                               .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList(
                                                                            Argument(
                                                                                IdentifierName("dictionary")
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                        )
                                                    )
                                                )
                                            )
                                    )
                                )
                            )
                        ),
                        ExpressionStatement(
                            InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("dictionary"),
                                        IdentifierName("Add")
                                    )
                                )
                               .WithArgumentList(
                                    ArgumentList(
                                        SeparatedList<ArgumentSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                Argument(
                                                    IdentifierName("key")
                                                ),
                                                Token(SyntaxKind.CommaToken),
                                                Argument(
                                                    IdentifierName("value")
                                                ),
                                            }
                                        )
                                    )
                                )
                        ),
                        ReturnStatement(
                            ThisExpression()
                        )
                    )
                )
        );
    }

    private static LocalFunctionStatementSyntax LocalFunctionStatementSyntax(ISymbol namedTypeSymbol)
    {
        return LocalFunctionStatement(IdentifierName($"{namedTypeSymbol.Name}Fixture"), Identifier(With));
    }

    private const string FieldGenericParameter = "TField";
    private const string With = "With";
}